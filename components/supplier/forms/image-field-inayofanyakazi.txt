<FormField control={form.control} name="images" render={() => ( <FormItem> <FormLabel>Picha za bidhaa</FormLabel> <FormControl> <div className="border-2 border-dashed rounded-lg p-6 flex flex-col items-center justify-center cursor-pointer hover:bg-muted"> <UploadButton endpoint="imageUploader" appearance={{ button: "bg-green-600 text-white hover:bg-green-700 px-4 py-2 rounded-md", label: "text-green-600 font-medium", }} content={{ button: "Chagua na pakia picha", // ðŸ‘ˆ replaces "Choose File" }} onClientUploadComplete={(res: { url: string }[]) => { const existing = form.getValues("images") || []; const newUrls = res.map((r) => r.url); if (existing.length + newUrls.length > 5) { toast({ variant: "destructive", description: "Unaweza kupakia hadi picha 5 pekee.", }); return; } form.setValue("images", [...existing, ...newUrls], { shouldValidate: true, }); toast({ title: "Upload successful", description: ${newUrls.length} image(s) uploaded, }); }} onUploadError={(error) => { toast({ variant: "destructive", description: error.message, }); }} /> <div className="mt-2 text-sm text-muted-foreground"> Buruta na udondoshe au ubofye ili kupakia (picha zisizozidi 5) </div> </div> </FormControl> {/* Preview thumbnails */} {form.watch("images")?.length > 0 && ( <div className="flex gap-2 flex-wrap mt-4"> {form.watch("images").map((src: string, idx: number) => ( <div key={idx} className="relative w-24 h-24 rounded-md overflow-hidden border" > <img src={src} alt={preview-${idx}} className="w-full h-full object-cover" /> <button type="button" className="absolute top-1 right-1 bg-red-500 text-white rounded-full p-1" onClick={() => { const updated = form .getValues("images") .filter((_: string, i: number) => i !== idx); form.setValue("images", updated, { shouldValidate: true, }); }} > âœ• </button> </div> ))} </div> )} <FormMessage /> </FormItem> )} />