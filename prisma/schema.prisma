generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  attempts   Int      @default(0) // resend attempts
  createdAt  DateTime @default(now())

  @@id([identifier, token])
}

model PhoneVerification {
  id        String   @id @default(uuid())
  phone     String   @unique
  token     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model User {
  id                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String           @default("NO_NAME")
  email                 String?          @unique
  emailVerified         DateTime?        @db.Timestamp(6)
  phone                 String?          @unique
  phoneVerified         DateTime?
  whatsapp              String?
  role                  UserRole         @default(BUYER)
  country               String?
  location              String?
  mapLat                Float?
  mapLng                Float?
  isVerified            Boolean          @default(false)
  image                 String?
  password              String?
  address               Json?            @db.Json
  paymentMethod         String?
  avatar                String?
  createdAt             DateTime         @default(now()) @db.Timestamp(6)
  updatedAt             DateTime         @updatedAt
  account               Account[]
  Cart                  Cart[]
  BuyerConversations    Conversation[]   @relation("BuyerConversations")
  SupplierConversations Conversation[]   @relation("SupplierConversations")
  messagesSent          Message[]        @relation("SentMessages")
  Order                 Order[]
  Review                Review[]
  session               Session[]
  Supplier              Supplier?
  ProductComment        ProductComment[]
  Notification          Notification[]
  // SupplierNote          SupplierNote[]
  Admin                 Admin?
}

model Cart {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String? @db.Uuid
  sessionCartId String
  items         Json[]  @default([]) @db.Json
  itemsPrice    Decimal @db.Decimal(12, 2)
  totalPrice    Decimal @db.Decimal(12, 2)
  shippingPrice Decimal @db.Decimal(12, 2)
  taxPrice      Decimal @db.Decimal(12, 2)
  isBuyNow      Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  description String?
  image       String?
  products    Product[]
}

model Category {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name_en       String        @unique
  name_sw       String
  image         String?
  parentId      String?       @db.Uuid
  updatedAt     DateTime      @default(now()) @db.Timestamp(6)
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  description   String        @default("")
  sortOrder     Int           @default(0) // ✅ new
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name_en     String
  name_sw     String
  categoryId  String    @db.Uuid
  image       String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  description String?
  sortOrder   Int       @default(0) // ✅ new
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id])
}

// Audit logs
model AuditLog {
  id         String   @id @default(uuid())
  name       String   @default("NO_NAME")
  adminId    String   @db.Uuid
  action     String // e.g. "DOCUMENT_APPROVED", "DOCUMENT_REJECTED"
  entityId   String?  @db.Uuid // e.g. documentId or supplierId
  entityType String? // e.g. "SupplierDocument", "Supplier"
  reason     String? // rejection reason or note (nullable)
  details    Json? // store extra metadata
  createdAt  DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])
}

model Product {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  slug           String           @unique(map: "product_slug_idx")
  description    String
  images         String[]
  banner         String?
  price          Decimal          @default(0) @db.Decimal(12, 2)
  stock          Int              @default(0)
  color          String?
  size           String?
  tags           String[] // e.g., ["organic", "handmade", "bulk"]
  supplierId     String           @db.Uuid
  rating         Decimal          @default(0) @db.Decimal(3, 2)
  numReviews     Int              @default(0)
  isFeatured     Boolean          @default(false)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  brandId        String           @db.Uuid
  categoryId     String           @db.Uuid
  subcategoryId  String           @db.Uuid
  thumbnail      String?
  Conversation   Conversation[]
  OrderItem      OrderItem[]
  brand          Brand            @relation(fields: [brandId], references: [id])
  category       Category         @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory      @relation(fields: [subcategoryId], references: [id])
  supplier       Supplier         @relation(fields: [supplierId], references: [id])
  pricingTiers   ProductPricing[]
  Review         Review[]
  Message        Message[]
  ProductComment ProductComment[]
  ProductVariant ProductVariant[]
  // SupplierNote   SupplierNote[]
}

model ProductPricing {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @db.Uuid
  minQty    Int
  price     Decimal @db.Decimal(12, 2)
  product   Product @relation(fields: [productId], references: [id])
}

model Message {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String @db.Uuid
  senderId       String @db.Uuid

  // Rename body → content (to match API code)
  //add default value
  content String @default("")

  // Mark message as read/unread (isRead)
  seen Boolean @default(false)

  // Replying to another message (self-relation)
  replyToId String?   @db.Uuid
  replyTo   Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies   Message[] @relation("MessageReplies")

  // Optional product (if chat is about a product)
  productId String?  @db.Uuid
  product   Product? @relation(fields: [productId], references: [id])

  // Optional inquiry linked to this message
  inquiry Inquiry? @relation(fields: [inquiryId], references: [id])

  // Attachments if needed
  attachments Attachment[]

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  sentAt    DateTime? @default(now()) @db.Timestamp(6)

  // moderation
  moderated      Boolean   @default(false) // has moderator acted?
  moderatedBy    String? // who moderated
  moderatedAt    DateTime? // when
  moderationNote String?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation("SentMessages", fields: [senderId], references: [id])
  inquiryId    String?      @db.Uuid
}

model Attachment {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url       String
  name      String?
  mimeType  String?
  messageId String  @db.Uuid
  message   Message @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Supplier {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label         String? // e.g. "Gold Supplier", "Verified Supplier"
  name          String
  username      String? @unique
  tagLine       String?
  description   String?
  email         String  @unique
  phone         String?
  //Business
  companyName   String?
  businessHours Json? // e.g. { mon: "8-5", tue: "8-5" }
  bannerUrl     String?
  businessType  String? // e.g. Manufacturer, Wholesaler, Retailer

  country           String?
  location          String?
  nation            String?
  about             String?
  logo              String?
  website           String?
  isVerified        Boolean             @default(false)
  yearsActive       Int                 @default(1)
  rating            Decimal             @default(0.0) @db.Decimal(3, 2)
  deliveryRate      Int                 @default(0)
  responseTime      String?
  avatar            String?
  banner            String?
  certifications    Certification[]
  gallery           Json? // Array of image/video URLs
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  verifiedAt        DateTime?           @db.Timestamp(6)
  verifiedBy        String?             @db.Uuid
  products          Product[]
  Quote             Quote[]
  user              User                @relation(fields: [userId], references: [id])
  SupplierPolicy    SupplierPolicy[]
  SupplierAnalytics SupplierAnalytics[]
  SupplierDocument  SupplierDocument[]
  // SupplierNote      SupplierNote[]
}

model Certification {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierId      String  @db.Uuid
  documentId      String? @db.Uuid // optional link
  visibleToBuyers Boolean @default(true)

  image      String
  label      String
  type       String?
  certNumber String    @default("") // avoids null
  verified   Boolean   @default(false)
  validUntil DateTime?
  updatedAt  DateTime  @default(now()) @db.Timestamp(6)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
}

model Conversation {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyerId    String @db.Uuid
  supplierId String @db.Uuid

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  buyer     User     @relation("BuyerConversations", fields: [buyerId], references: [id])

  supplier User @relation("SupplierConversations", fields: [supplierId], references: [id])

  messages  Message[]
  Product   Product?  @relation(fields: [productId], references: [id])
  productId String?   @db.Uuid
  Inquiry   Inquiry[]

  @@unique([buyerId, supplierId])
}

model Inquiry {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String @db.Uuid

  // Example fields (you can expand)
  productId String?

  buyerId       String?
  quantity      Decimal?      @db.Decimal(12, 2)
  subject       String?
  details       String?
  unit          String?
  variant       String?
  targetPrice   Decimal?      @db.Decimal(12, 2)
  customization Boolean?
  shippingTerm  String?
  needSamples   Boolean?      @default(false)
  notes         String?
  status        InquiryStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime      @updatedAt @db.Timestamp(6)
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  Quote         Quote[]
  Message       Message[]

  // @@unique([conversationId, productId]) //If you want to allow only one inquiry per product per conversation
}

model Quote {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inquiryId    String   @db.Uuid
  supplierId   String   @db.Uuid
  pricePerUnit Decimal  @db.Decimal(12, 2)
  moq          Int
  productId    String?
  buyerId      String?
  quantity     Decimal? @db.Decimal(12, 2)
  leadTime     String?
  validity     String?
  notes        String?
  attachments  Json?
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @db.Timestamp(6)
  inquiry      Inquiry  @relation(fields: [inquiryId], references: [id])
  supplier     Supplier @relation(fields: [supplierId], references: [id])
}

model SupplierPolicy {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierId     String   @db.Uuid
  type           String // e.g. "Shipping", "Returns", "Warranty" 
  // type: "return" | "shipping" | "payment" | "warranty" | "custom"
  content        String // markdown/text
  additionalInfo Json?    @db.Json // e.g. { "returnPeriod": "30 days" }
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])
}

model ProductComment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @db.Uuid
  userId    String   @db.Uuid
  parentId  String?  @db.Uuid // allows threading
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product          @relation(fields: [productId], references: [id])
  user    User             @relation(fields: [userId], references: [id])
  parent  ProductComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies ProductComment[] @relation("CommentReplies")
}

model ProductVariant {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @db.Uuid
  sku       String? @unique
  name      String // e.g. "Red - XL"
  price     Decimal @db.Decimal(12, 2)
  stock     Int     @default(0)
  image     String?

  product Product @relation(fields: [productId], references: [id])
}

model SupplierAnalytics {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierId String   @db.Uuid
  metric     String // e.g. "PRODUCT_VIEW", "ORDER_PLACED"
  value      Int
  createdAt  DateTime @default(now())

  supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  type      String // ORDER, MESSAGE, REVIEW, COMMENT
  title     String
  content   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SupplierDocument {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierId      String         @db.Uuid
  label           String
  name            String
  type            String? // e.g. "Catalog", "License", "Certificate",
  fileUrl         String
  files           Json?          @db.Json // Array of file URLs if multiple
  description     String?
  status          DocumentStatus @default(PENDING)
  source          String? // e.g. "Uploaded by user", "Imported from ..."
  visibleToBuyers Boolean        @default(false) // ✅ new
  validUntil      DateTime? //can be null for non-expiring docs
  verified        Boolean        @default(false)
  verifiedBy      String?        @db.Uuid
  verifiedAt      DateTime?
  rejectionReason String?
  uploadedAt      DateTime       @default(now()) @db.Timestamp(6)
  createdAt       DateTime       @default(now()) @db.Timestamp(6)
  certNumber      String? // ✅ optional
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
}

// model SupplierNote {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   supplierId String   @db.Uuid
//   productId  String?  @db.Uuid
//   buyerId    String?
//   note       String
//   createdAt  DateTime @default(now()) @db.Timestamp(6)

//   supplier Supplier @relation(fields: [supplierId], references: [id])
//   product  Product? @relation(fields: [productId], referemnces: [id])
//   buyer    User?    @relation(fields: [buyerId], references: [id])
// }

// For Admin users (if different from normal users)
model Admin {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  role      String   @default("ADMIN") // could be SUPERADMIN, MODERATOR etc
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  AuditLog AuditLog[]
}

model Banner {
  id        String       @id @default(uuid()) @db.Uuid
  image     String // required → banner without image is useless
  title     String? // short headline (e.g. "Fall Boots under $15")
  subtitle  String? // optional smaller line (e.g. "Limited Time Offer")
  text      String?
  link      String? // where user goes when clicking
  type      String? // e.g. "hero", "promo", "sidebar"
  data      Json? // extra flexible config (colors, CTA buttons, etc.)
  isActive  Boolean      @default(false)
  mode      BannerMode   @default(MANUAL) // <— NEW
  items     BannerItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model BannerItem {
  id       String  @id @default(uuid()) @db.Uuid
  image    String
  title    String?
  link     String
  bannerId String  @db.Uuid
  banner   Banner  @relation(fields: [bannerId], references: [id], onDelete: Cascade)
}

enum BannerType {
  PROMO
  CATEGORY_GROUP
}

enum BannerMode {
  MANUAL // admin picks
  AUTO // system picks from DB (best sellers, new arrivals, etc.)
}

enum UserRole {
  BUYER
  SUPPLIER
  ADMIN
}

enum InquiryStatus {
  PENDING
  QUOTED
  CLOSED
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}
